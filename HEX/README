Homework 6
Name: Yongfeng Zhang, Jia Xu
CMPS109 2014 Winter

HOW TO COMPILE:

make all ---will generate two executive files: simple_server simple_client
make clean --- will delete all .o and executive files

HOW TO PLAY:
In Local machine (Linux, Mac, Windows), open two terminals, then run ./simple_server localhost, then in the output looks for the port info, will find something like "Port = 34779 Succeed!", REMEMBER the port number which will be used in Client side running. Then in another terminal, run ./simple_client, then enter "localhost" as a server name, enter the port number you got from server side. Then there are several instructions print out on the client side screen, now insert the board size, pick up any number from 4 to 11, then insert the difficulty level following the instructions. Wait for a moment, then enter x value then press "enter" in keyboard, then y value. In this case, x value is vertical location on the board, y value is horizontal location on the board. Then wait for the computer response, then enter new move until the game is over. 

In UNIX machine, ssh into the unix.ic.ucsc.edu, then assume everything has already been compiled. enter screen in the terminal to run the screen program, then   insert "./simple_server localhost", after the server info, REMEMBER the port number.Then enter "CTRL-A c" to create a new screen, now enter "./simple_client",then "localhost",  the rest of the game will be the same as the Local machine running. 
   	
       
About the work:

To tell the winner, however, we need to do a Breadth-first search on each of the nodes in the left side and in the upper side. Therefore, we
need to know the connectivity of the graph. We used an adjacency list to do it. As discussed in class, there are many corner cases concerning
the number of degrees each node has. We used if-else conditions to treat them separately.

After establishing the adjacency list, we wrote a function setBoard() to fill the board with white and black moves. Note that all the container
data structures we used are one dimensional (except for the adjacency list) for simplicity, though the graph and board are two-dimensional.

Finally, in function wins(), we are to find out who has a path either from the upper side to the bottom side or from the left side to the right
side. Note that there is a slight difference here from a real game, in which one color starts from left, and the other starts from the top.
While here, we just put whites and blacks randomly on the board. So whenever there is a valid path starting from node i, we look up its color,
if it's white, then the white side wins, otherwise, the black side wins.

We also printed out the indices of the beginning and the end nodes of the valid path.

You can just run make in the top directory to compile the source code. And then input hex to run the program.
