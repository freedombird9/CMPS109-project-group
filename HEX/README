Homework 4
Name: Yongfeng Zhang, Jia Xu
CMPS109 2014 Winter

About the work:

The objective of this homework is to implement a hex game board, and fill it with moves (half white, half black). Printing the game board is
pretty straightforward once we are given the size of the board, we don't even need to build any data structure. As usual, we overloaded the
<< operator to do the printing of the board. There is a little bit of math in calculating how many white spaces should be put in front of each
line of the game board, because the board is a parallelogram.

To tell the winner, however, we need to do a Breadth-first search on each of the nodes in the left side and in the upper side. Therefore, we
need to know the connectivity of the graph. We used an adjacency list to do it. As discussed in class, there are many corner cases concerning
the number of degrees each node has. We used if-else conditions to treat them separately.

After establishing the adjacency list, we wrote a function setBoard() to fill the board with white and black moves. Note that all the container
data structures we used are one dimensional (except for the adjacency list) for simplicity, though the graph and board are two-dimensional.

Finally, in function wins(), we are to find out who has a path either from the upper side to the bottom side or from the left side to the right
side. Note that there is a slight difference here from a real game, in which one color starts from left, and the other starts from the top.
While here, we just put whites and blacks randomly on the board. So whenever there is a valid path starting from node i, we look up its color,
if it's white, then the white side wins, otherwise, the black side wins.

We also printed out the indices of the beginning and the end nodes of the valid path.

You can just run make in the top directory to compile the source code. And then input hex to run the program.
